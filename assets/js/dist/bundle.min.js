'use strict';

/******/(function (modules) {
	// webpackBootstrap
	/******/ // The module cache
	/******/var installedModules = {};
	/******/
	/******/ // The require function
	/******/function __webpack_require__(moduleId) {
		/******/
		/******/ // Check if module is in cache
		/******/if (installedModules[moduleId])
			/******/return installedModules[moduleId].exports;
		/******/
		/******/ // Create a new module (and put it into the cache)
		/******/var module = installedModules[moduleId] = {
			/******/exports: {},
			/******/id: moduleId,
			/******/loaded: false
			/******/ };
		/******/
		/******/ // Execute the module function
		/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ // Flag the module as loaded
		/******/module.loaded = true;
		/******/
		/******/ // Return the exports of the module
		/******/return module.exports;
		/******/
	}
	/******/
	/******/
	/******/ // expose the modules object (__webpack_modules__)
	/******/__webpack_require__.m = modules;
	/******/
	/******/ // expose the module cache
	/******/__webpack_require__.c = installedModules;
	/******/
	/******/ // __webpack_public_path__
	/******/__webpack_require__.p = "";
	/******/
	/******/ // Load entry module and return exports
	/******/return __webpack_require__(0);
	/******/
})(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {

	'use strict';

	var _admin = __webpack_require__(1);

	var _admin2 = _interopRequireDefault(_admin);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	(function () {
		new _admin2.default();
	})(); /**
        * Created by oshry on 21/08/2016.
        */

	/***/
},
/* 1 */
/***/function (module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	/**
  * Created by oshry on 19/08/2016.
  */
	var BASE = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/tests/2/admin/api/';

	var Admin = function () {
		function Admin() {
			_classCallCheck(this, Admin);

			var _this = self;
			this.modules = '';
			this.init(_this);
		}
		//modules list promise


		_createClass(Admin, [{
			key: 'ajax_modules',
			value: function ajax_modules(url) {
				return new Promise(function (resolve, reject) {
					$.ajax({
						type: "GET",
						url: url,
						dataType: "json",
						success: function success(xhr, status, error) {
							resolve(xhr);
						},
						error: function error(req) {
							reject(new Error(req.statusText));
						}
					});
				});
			}
		}, {
			key: 'modules_storage',
			value: function modules_storage(response) {
				var _this2 = this;

				new Promise(function (resolve, reject) {
					_this2.modules = response;
					resolve(response);
				});
			}
		}, {
			key: 'load_modules_list',
			value: function load_modules_list() {
				var _this3 = this;

				this.ajax_modules(BASE + "modules_list/").then(function (x) {
					return _this3.modules_storage(x);
				}).catch(function (err) {
					return console.log(err);
				});
			}
		}, {
			key: 'init',
			value: function init(e) {
				var blat = this;
				blat.load_modules_list();
				//on page layout change -> load areas forms in order to decide which module will load in which place
				// $('.select-layout').on('change', function(b){
				//     //console.log(blat.modules);
				//     //console.log(this.value);
				//     let layout_id = this.value;
				//     let parts = $('option:selected', this).attr('modules');
				//     // console.log(parts);
				//     $('#modules').html('');
				//     let modules_list = '';
				//     let what = blat.modules['modules_list'];
				//     what.forEach(child =>{
				//         modules_list+=`<option value="`+child.id+`">`+child.name+`</option>`;
				//     });
				//     //load areas forms
				//     for (var index = 0; index < parts; index++) {
				//         $('#modules').append(`
				//         <form class="area_form` + index + `" method="post" onsubmit="event.preventDefault();">
				//             <input type="hidden" id="layout_areas" name="layout_areas" value="` + layout_id + `"/>
				//             <div class="line">
				//                 <label for="layout"> Area ` + index + `: Select Module</label>
				//                 <select name="select-module" class="select-module` + index + `">
				//                     <option>  </option>` +
				//                     modules_list
				//                     +
				//                     `</select>
				//             </div>
				//             <div class="line">
				//                 <div class="controls">
				//                 <input type="submit" name="submit" class="button" id="submit_btn" value="Submit" />
				//                 </div>
				//             </div>
				//             </form>
				//             <div class="configuration` + index + `"></div>
				//             <script type="application/javascript" charset="UTF-8">
				//                 //submit area
				//                 $('.area_form` + index + `').on('submit', function(){
				//                      let form_data = $(this).serialize();
				//                      let form_arr = $(this).serializeArray();
				//                      let module_id = form_arr[1]['value'];
				//                      let _this = this;
				//                      //+e.target.value
				//                     $.ajax({
				//                         type: "POST",
				//                         url:"`+BASE+`insert_area",
				//                         data: form_data,
				//                         success:function(area_id){
				//                             $(_this).find('input[type=submit]').prop('disabled', true);
				//                             //show module configuration form
				//                             $.ajax({
				//                                 type:"GET",
				//                                 url: '`+BASE+`load_configuration_form/'+module_id+'/'+area_id,
				//                                 success:function(data){
				//                                     $('.configuration` + index + `').html();
				//                                     $('.configuration` + index + `').append(data);
				//                                 },
				//                                 error:function(){
				//
				//                                 }
				//                             });
				//                             console.log('success');
				//                         },
				//                         error: function(){
				//                             console.log('error');
				//                         }
				//                     });
				//                 });
				//             </script>
				//             `);
				//     }
				//
				// });
				$('#create_page').on('submit', function (e) {
					e.preventDefault();
					var data = $(this).serialize();
					var data_arr = $(this).serializeArray();
					console.log(data_arr);
					var _this = this;
					$.ajax({
						url: BASE + "create_page",
						type: "POST",
						data: data,
						success: function success(data) {
							$(_this).find('input[type=submit]').prop('disabled', true);
							var layout_id = data_arr[2]['value'];
							//console.log(data);
							var parts = $('option:selected', _this).attr('modules');
							$('#modules').html('');
							var modules_list = '';
							var what = blat.modules['modules_list'];
							what.forEach(function (child) {
								modules_list += '<option value="' + child.id + '">' + child.name + '</option>';
							});
							//load areas forms
							for (var index = 0; index < parts; index++) {
								$('#modules').append('\n                            <form class="area_form' + index + '" method="post" onsubmit="event.preventDefault();">\n                                <input type="hidden" id="layout_areas" name="layout_areas" value="' + layout_id + '"/>\n                                <input type="hidden" id="page_id" name="page_id" value="' + data + '"/>\n                                <div class="line">\n                                    <label for="layout"> Area ' + index + ': Select Module</label>\n                                    <select name="select-module" class="select-module' + index + '">\n                                        <option>  </option>' + modules_list + '</select>\n                                </div>\n                                <div class="line">\n                                    <div class="controls">\n                                    <input type="submit" name="submit" class="button" id="submit_btn" value="Submit" />\n                                    </div>\n                                </div>\n                                </form>\n                                <div class="configuration' + index + '"></div>\n                                <script type="application/javascript" charset="UTF-8">\n                                    //submit area\n                                    $(\'.area_form' + index + '\').on(\'submit\', function(){\n                                         let form_data = $(this).serialize();\n                                         let form_arr = $(this).serializeArray();\n                                         let module_id = form_arr[2][\'value\'];\n                                         let _this = this;\n                                         //+e.target.value\n                                        $.ajax({\n                                            type: "POST",\n                                            url:"' + BASE + 'insert_area",\n                                            data: form_data,\n                                            success:function(area_id){\n                                                $(_this).find(\'input[type=submit]\').prop(\'disabled\', true);\n                                                //show module configuration form \n                                                $.ajax({\n                                                    type:"GET",\n                                                    url: \'' + BASE + 'load_configuration_form/\'+module_id+\'/\'+area_id,\n                                                    success:function(data){\n                                                        $(\'.configuration' + index + '\').html();\n                                                        $(\'.configuration' + index + '\').append(data);\n                                                    },\n                                                    error:function(){\n                                                    \n                                                    }\n                                                });\n                                                console.log(\'success\');\n                                            },\n                                            error: function(){\n                                                console.log(\'error\');\n                                            }\n                                        });\n                                    });\n                                </script>\n                                ');
							}
						},
						error: function error() {
							console.log('nooo');
						}
					});
					console.log('yeahhhhh');
				});
			}
		}]);

		return Admin;
	}();

	exports.default = Admin;

	/***/
}
/******/]);